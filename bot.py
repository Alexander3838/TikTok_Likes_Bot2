import time
import sqlite3
import textwrap
import threading
from flask import Flask, request, redirect
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, BotCommand, BotCommandScopeDefault, BotCommandScopeChat
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from config import TOKEN, ADMIN_ID
from keep_alive import keep_alive

# üîß Flask-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
web_app = Flask('')

@web_app.route('/click')
def track_click():
    user_id = request.args.get('user_id')
    video_link = request.args.get('video_link')

    if user_id and video_link:
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("""
            CREATE TABLE IF NOT EXISTS click_log (
                user_id INTEGER,
                video_link TEXT,
                UNIQUE(user_id, video_link)
            )
        """)
        cur.execute("INSERT OR IGNORE INTO click_log (user_id, video_link) VALUES (?, ?)", (user_id, video_link))
        conn.commit()
        conn.close()

        # ‚úÖ –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
        return redirect(video_link)

    return "‚ùå –û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

@web_app.route('/')
def home():
    return "‚úÖ –Ø –∂–∏–≤!"

def run_web():
    web_app.run(host='0.0.0.0', port=8080)

def keep_alive():
    threading.Thread(target=run_web).start()

# –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Å—Ç—è–º–∏
def send_long_message(update, text, max_len=4000):
    parts = textwrap.wrap(text, width=max_len, break_long_words=False, break_on_hyphens=False)
    for part in parts:
        update.message.reply_text(part)

def init_db():
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            likes_given INTEGER DEFAULT 0,
            likes_received INTEGER DEFAULT 0
        )
    """)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É invited_by, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    try:
        cur.execute("ALTER TABLE users ADD COLUMN invited_by INTEGER")
    except sqlite3.OperationalError:
        pass  # –∫–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –∑–∞–±–∞–Ω–µ–Ω –ª–∏
    try:
        cur.execute("ALTER TABLE users ADD COLUMN banned INTEGER DEFAULT 0")
    except sqlite3.OperationalError:
        pass

    # ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
    try:
        cur.execute("ALTER TABLE users ADD COLUMN warnings INTEGER DEFAULT 0")
    except sqlite3.OperationalError:
        pass

    # –¢–∞–±–ª–∏—Ü–∞ –≤–∏–¥–µ–æ
    cur.execute("""
        CREATE TABLE IF NOT EXISTS videos (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            link TEXT UNIQUE,
            timestamp REAL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞–Ω–∏–π ‚Äî —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º task_done
    cur.execute("""
        CREATE TABLE IF NOT EXISTS tasks (
            user_id INTEGER PRIMARY KEY,
            links TEXT,
            task_time REAL,
            task_done INTEGER DEFAULT 0
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –ª–∞–π–∫–æ–≤ ‚Äî —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∏—Å—å –≤–∏–¥–µ–æ
    cur.execute("""
        CREATE TABLE IF NOT EXISTS likes_log (
            user_id INTEGER,
            video_link TEXT,
            PRIMARY KEY (user_id, video_link)
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ‚Äî —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
    cur.execute("""
        CREATE TABLE IF NOT EXISTS notify_log (
            user_id INTEGER PRIMARY KEY,
            last_notify REAL
        )
    """)

    # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º (–ø–µ—Ä–µ–π–¥–µ–Ω–æ –ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ)
    cur.execute("""
        CREATE TABLE IF NOT EXISTS click_log (
            user_id INTEGER,
            video_link TEXT,
            timestamp REAL,
            PRIMARY KEY (user_id, video_link)
        )
    """)

    conn.commit()
    conn.close()

    
def cleanup_old_videos():
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()
    cutoff = time.time() - 86400  # 24 —á–∞—Å–∞

    # –ü–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã
    cur.execute("""
        SELECT user_id, link FROM videos
        WHERE timestamp < ?
        AND link NOT IN (
            SELECT video_link FROM likes_log
        )
    """, (cutoff,))
    to_delete = cur.fetchall()

    # –£–¥–∞–ª—è–µ–º –∏—Ö
    cur.execute("""
        DELETE FROM videos
        WHERE timestamp < ?
        AND link NOT IN (
            SELECT video_link FROM likes_log
        )
    """, (cutoff,))
    conn.commit()
    conn.close()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    for user_id, link in to_delete:
        try:
            from config import TOKEN
            from telegram import Bot
            bot = Bot(token=TOKEN)
            bot.send_message(
                chat_id=user_id,
                text="üìå –¢–≤–æ—ë –≤–∏–¥–µ–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–æ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ –ª–∞–π–∫–æ–≤ –∑–∞ 24 —á–∞—Å–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ–≥–æ —Å–Ω–æ–≤–∞! üîÅ"
            )
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def is_tiktok_link(text):
    return "tiktok.com" in text

def register_user(user_id, invited_by=None):
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()
    if invited_by:
        cur.execute("INSERT OR IGNORE INTO users (user_id, likes_given, likes_received, invited_by) VALUES (?, 0, 0, ?)", (user_id, invited_by))
    else:
        cur.execute("INSERT OR IGNORE INTO users (user_id) VALUES (?)", (user_id,))
    conn.commit()
    conn.close()

def add_video(user_id, link, is_admin=False):
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–µ –≤–∏–¥–µ–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    cur.execute("SELECT link FROM videos WHERE user_id=? AND link=?", (user_id, link))
    if cur.fetchone():
        conn.close()
        return "‚ö†Ô∏è –≠—Ç–æ –≤–∏–¥–µ–æ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ."

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: –Ω–µ –±–æ–ª–µ–µ 1 –≤–∏–¥–µ–æ
    if not is_admin:
        cur.execute("SELECT COUNT(*) FROM videos WHERE user_id=?", (user_id,))
        count = cur.fetchone()[0]
        if count >= 1:
            conn.close()
            return "‚ùó –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ 1 –≤–∏–¥–µ–æ. –ß—Ç–æ–±—ã –æ–Ω–æ –ø–æ–ø–∞–ª–æ –≤ –æ—á–µ—Ä–µ–¥—å, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è!"

    # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º (timestamp)
    cur.execute(
        "INSERT INTO videos (user_id, link, timestamp) VALUES (?, ?, ?)",
        (user_id, link, time.time())
    )

    conn.commit()
    conn.close()

    return "‚úÖ –í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ß—Ç–æ–±—ã –æ–Ω–æ –ø–æ–ø–∞–ª–æ –≤ –æ—á–µ—Ä–µ–¥—å, –ª–∞–π–∫–Ω–∏—Ç–µ 3 –≤–∏–¥–µ–æ."

def get_tasks(user_id):
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    cur.execute("SELECT links, task_done FROM tasks WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row:
        links, task_done = row
        conn.close()
        return links.split(","), task_done

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–∞–ª
    cur.execute("SELECT video_link FROM likes_log WHERE user_id=?", (user_id,))
    liked_links = set(row[0] for row in cur.fetchall())

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω –µ—â—ë –Ω–µ –ª–∞–π–∫–∞–ª
    cur.execute("SELECT link FROM videos WHERE user_id != ?", (user_id,))
    all_links = [row[0] for row in cur.fetchall()]
    unique_links = [link for link in all_links if link not in liked_links]

    # –ë–µ—Ä—ë–º –¥–æ 3 –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    links = unique_links[:3]

    if links:
        now = time.time()
        cur.execute("REPLACE INTO tasks (user_id, links, task_time, task_done) VALUES (?, ?, ?, 0)",
                    (user_id, ",".join(links), now))
        conn.commit()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞–Ω–µ–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥—å, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
    cur.execute("SELECT links, task_done FROM tasks WHERE user_id=? AND task_done=3", (user_id,))
    row = cur.fetchone()
    if row:
        link_to_restore, _ = row
        cur.execute("INSERT OR IGNORE INTO videos (user_id, link, timestamp) VALUES (?, ?, ?)",
                    (user_id, link_to_restore, time.time()))
        cur.execute("DELETE FROM tasks WHERE user_id=? AND task_done=3", (user_id,))
        conn.commit()
    
    conn.close()
    return links, 0

def confirm_likes(user_id):
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ –∑–∞–±–∞–Ω–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    cur.execute("SELECT banned FROM users WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if row and row[0] == 1:
        conn.close()
        return "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –Ω–µ—á–µ—Å—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π."

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
    cur.execute("SELECT links, task_time, task_done FROM tasks WHERE user_id=?", (user_id,))
    row = cur.fetchone()
    if not row:
        conn.close()
        return "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π."

    links, task_time, task_done = row
    link_list = links.split(",")

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —á—Ç–æ–±—ã –Ω–µ –≤—ã–π—Ç–∏ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
    if task_done >= len(link_list):
        conn.close()
        return "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã."

    current_link = link_list[task_done]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–µ—Ä–∞
    elapsed = time.time() - task_time
    if elapsed < 30:
        conn.close()
        return f"‚è± –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏ –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥. –û—Å—Ç–∞–ª–æ—Å—å {int(30 - elapsed)} —Å–µ–∫."

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ
    cur.execute("SELECT 1 FROM click_log WHERE user_id=? AND video_link=?", (user_id, current_link))
    clicked = cur.fetchone()

    if not clicked:
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
        cur.execute("SELECT warnings FROM users WHERE user_id=?", (user_id,))
        row = cur.fetchone()
        warnings = row[0] if row else 0
        warnings += 1
        cur.execute("UPDATE users SET warnings=? WHERE user_id=?", (warnings, user_id))

        if warnings >= 3:
            cur.execute("UPDATE users SET banned=1 WHERE user_id=?", (user_id,))
            conn.commit()
            conn.close()

            # –°–æ–æ–±—â–∞–µ–º –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
            try:
                from config import ADMIN_ID
                context = CallbackContext.from_update(update)  # –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å update –∏–∑–≤–Ω–µ –∏–ª–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ
                context.bot.send_message(ADMIN_ID, f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ 3 –æ–±–º–∞–Ω–∞.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")

            return "‚õî –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∑–∞ –æ–±–º–∞–Ω (3 –∏–∑ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π)."

        conn.commit()
        conn.close()
        return f"‚ö†Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω. –ë—É–¥—å —á–µ—Å—Ç–Ω—ã–º!\n\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {warnings} –∏–∑ 3."

    # –í—Å—ë —á–µ—Å—Ç–Ω–æ ‚Äî –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ–º –ª–∞–π–∫
    cur.execute("INSERT OR IGNORE INTO likes_log (user_id, video_link) VALUES (?, ?)", (user_id, current_link))

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    cur.execute("SELECT user_id FROM videos WHERE link=?", (current_link,))
    owner_row = cur.fetchone()
    if owner_row:
        owner_id = owner_row[0]
        cur.execute("UPDATE users SET likes_received = likes_received + 1 WHERE user_id=?", (owner_id,))
        cur.execute("UPDATE users SET likes_given = likes_given + 1 WHERE user_id=?", (user_id,))

        cur.execute("SELECT COUNT(*) FROM likes_log WHERE video_link=?", (current_link,))
        total_likes = cur.fetchone()[0]

        if total_likes >= 3:
            cur.execute("DELETE FROM videos WHERE link=?", (current_link,))
            # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –æ—á–µ—Ä–µ–¥—å
            cur.execute("INSERT OR IGNORE INTO tasks (user_id, links, task_time, task_done) VALUES (?, ?, 0, 3)", (owner_id, current_link))

    # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∑–∞–¥–∞–Ω–∏—è–º
    task_done += 1
    now = time.time()

    if task_done >= len(link_list):
        cur.execute("DELETE FROM tasks WHERE user_id=?", (user_id,))
        conn.commit()
        conn.close()
        return "‚úÖ –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –¢–≤–æ—ë –≤–∏–¥–µ–æ —Å–Ω–æ–≤–∞ –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ 3 –ª–∞–π–∫–∞! üéâ"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    cur.execute("UPDATE tasks SET task_done=?, task_time=? WHERE user_id=?", (task_done, now, user_id))
    conn.commit()
    conn.close()

    next_link = link_list[task_done]
    return (
        f"‚úÖ –õ–∞–π–∫ –∑–∞—Å—á–∏—Ç–∞–Ω!\n\n"
        f"üîó –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ:\n{next_link}\n\n"
        f"‚è≥ –ñ–¥–∏ 30 —Å–µ–∫—É–Ω–¥ –∏ –Ω–∞–∂–º–∏ ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏\n"
        f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {task_done + 1} –∏–∑ {len(link_list)}"
    )

def get_top(limit=5):
    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, likes_given, likes_received FROM users ORDER BY likes_given DESC LIMIT ?", (limit,))
    top = cur.fetchall()
    conn.close()
    return top

def start(update: Update, context: CallbackContext):
    user = update.effective_user
    args = context.args
    invited_by = int(args[0]) if args and args[0].isdigit() and int(args[0]) != user.id else None
    register_user(user.id, invited_by)

    keyboard = [
        [KeyboardButton("üîó –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ")],
        [KeyboardButton("üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è"), KeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏")],
        [KeyboardButton("üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"), KeyboardButton("üìú –ü—Ä–∞–≤–∏–ª–∞")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="‚úãüèª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ üëá",
        reply_markup=reply_markup
    )

def handle_invate(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    register_user(user_id)
    referral_link = f"https://t.me/{context.bot.username}?start={user_id}"
    update.message.reply_text(
        f"üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å!\n\n"
        f"–í–æ—Ç —Ç–≤–æ—è —Å—Å—ã–ª–∫–∞:\n{referral_link}\n\n"
        f"–ö–∞–∫ —Ç–æ–ª—å–∫–æ –¥—Ä—É–≥ –≤—ã–ø–æ–ª–Ω–∏—Ç —Å–≤–æ—ë –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, —Ç–≤–æ—ë –≤–∏–¥–µ–æ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ª–∞–π–∫–æ–≤!"
    )

def handle_message(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    register_user(user_id)

    # üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞
    if text.startswith("/unblock") and user_id == ADMIN_ID:
        parts = text.split()
        if len(parts) == 2 and parts[1].isdigit():
            unblock_id = int(parts[1])
            conn = sqlite3.connect("likes_bot.db")
            cur = conn.cursor()
            cur.execute("UPDATE users SET is_blocked=0, warnings=0 WHERE user_id=?", (unblock_id,))
            conn.commit()
            conn.close()
            update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã.")
        else:
            update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /unblock ID")
        return

    # üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    if text == "/banned" and user_id == ADMIN_ID:
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("SELECT user_id, warnings FROM users WHERE is_blocked=1")
        banned = cur.fetchall()
        conn.close()
        if not banned:
            update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        else:
            msg = "<b>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
            for uid, w in banned:
                msg += f"üîí ID <code>{uid}</code> ‚Äî {w} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
            update.message.reply_text(msg, parse_mode="HTML")
        return

    if text == "/admin_stats" and user_id == ADMIN_ID:
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM videos")
        total_videos = cur.fetchone()[0]
        cur.execute("SELECT COUNT(*) FROM tasks")
        active_tasks = cur.fetchone()[0]
        cur.execute("SELECT user_id, likes_given, likes_received FROM users ORDER BY likes_given DESC LIMIT 20")
        top = cur.fetchall()
        cur.execute("SELECT invited_by, COUNT(*) FROM users WHERE invited_by IS NOT NULL GROUP BY invited_by ORDER BY COUNT(*) DESC")
        invites = cur.fetchall()
        msg = f"""üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>
üéû –í–∏–¥–µ–æ –≤ –æ—á–µ—Ä–µ–¥–∏: <b>{total_videos}</b>
üß© –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: <b>{active_tasks}</b>

üèÜ <b>–¢–æ–ø 20 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>
"""
        for i, (uid, given, received) in enumerate(top, start=1):
            msg += f"{i}. ID <code>{uid}</code> ‚Äî üëçüèª {given} / ‚ù§Ô∏è {received}\n"
        msg += "\nüë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:</b>\n"
        for inviter, count in invites:
            msg += f"ID <code>{inviter}</code> –ø—Ä–∏–≥–ª–∞—Å–∏–ª {count} —á–µ–ª–æ–≤–µ–∫(–∞)\n"
        conn.close()
        update.message.reply_text(msg, parse_mode="HTML")
        return

    if text == "/invites" and user_id == ADMIN_ID:
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("SELECT invited_by, COUNT(*) FROM users WHERE invited_by IS NOT NULL GROUP BY invited_by ORDER BY COUNT(*) DESC")
        results = cur.fetchall()
        conn.close()
        if not results:
            update.message.reply_text("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        msg = "<b>üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è:</b>\n\n"
        for inviter_id, count in results:
            msg += f"üî∏ ID <code>{inviter_id}</code> ‚Äî –ø—Ä–∏–≥–ª–∞—Å–∏–ª <b>{count}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        update.message.reply_text(msg, parse_mode="HTML")
        return

    if text == "/video" and user_id == ADMIN_ID:
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("SELECT id, link FROM videos")
        videos = cur.fetchall()
        conn.close()
        if not videos:
            update.message.reply_text("–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.")
        else:
            msg = "\n".join([f"{v[0]}. {v[1]}" for v in videos])
            msg += "\n\n–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ, –Ω–∞–ø–∏—à–∏ /delete ID"
            send_long_message(update, msg)
        return

    if text.startswith("/delete") and user_id == ADMIN_ID:
        parts = text.split()
        if len(parts) < 2:
            update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: /delete ID [ID2 ID3...]")
            return

        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        deleted = []

        for pid in parts[1:]:
            if pid.isdigit():
                video_id = int(pid)
                cur.execute("DELETE FROM videos WHERE id=?", (video_id,))
                if cur.rowcount > 0:
                    deleted.append(video_id)

        conn.commit()
        conn.close()

        if deleted:
            update.message.reply_text(f"üóë –£–¥–∞–ª–µ–Ω—ã –≤–∏–¥–µ–æ —Å ID: {', '.join(map(str, deleted))}")
        else:
            update.message.reply_text("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª–µ–Ω–æ (–≤–æ–∑–º–æ–∂–Ω–æ, ID –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
        return

    if text == "/test_notify" and user_id == ADMIN_ID:
        context.bot.send_message(chat_id=user_id, text="üîî –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏.")
        return

    if text == "/invite":
        update.message.reply_text(f"üéÅ –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ 1 –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ!\n–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{context.bot.username}?start={user_id}")
        return

    if text == "üìú –ü—Ä–∞–≤–∏–ª–∞":
        update.message.reply_text(
            "üìã <b>–ü—Ä–∞–≤–∏–ª–∞:</b>\n\n"
            "1. –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ—ë –≤–∏–¥–µ–æ —Å TikTok üîó\n"
            "2. –ü–æ–ª—É—á–∏ 3 –∑–∞–¥–∞–Ω–∏—è —Å —á—É–∂–∏–º–∏ –≤–∏–¥–µ–æ üìã\n"
            "3. –ü–æ—Å—Ç–∞–≤—å –Ω–∞ –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ ‚ù§Ô∏è –∏ –ü–û–°–ú–û–¢–†–ò –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ –Ω–µ –º–µ–Ω–µ–µ 30 —Å–µ–∫—É–Ω–¥\n"
            "4. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏, —á—Ç–æ –ª–∞–π–∫–Ω—É–ª! –í–ù–ò–ú–ê–ù–ò–ï‚ÄºÔ∏è –ë–æ—Ç —Å–ª–µ–¥–∏—Ç –∑–∞ –Ω–µ—á–µ—Å—Ç–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∑–∞–¥–∞–Ω–∏–π –∏ –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É—á–∞–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Ä—É—à–µ–Ω–∏–π –ü–ï–†–ú–ê–ù–ï–ù–¢–ù–û. –ë—É–¥—å –ß–ï–°–¢–ù–´–ú ‚úÖ\n"
            "5. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç–≤–æ—ë –≤–∏–¥–µ–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥—å\n\n"
            "6. –û–Ω–æ –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω–æ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞\n\n"
            "7. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–æ –ø–æ–ª—É—á–∏—Ç 3 –ª–∞–π–∫–∞, –æ–Ω–æ –≤–Ω–æ–≤—å –ø—Ä–æ–ø–∞–¥–∞–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∏ —á—Ç–æ–±—ã –µ–≥–æ –≤–µ—Ä–Ω—É—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, –Ω—É–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –µ—â–µ 3 –∑–∞–¥–∞–Ω–∏—è\n\n"
            "8. –°–∫–æ–ª—å–∫–æ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫–æ–≤ —Ç—ã, —Å—Ç–æ–ª—å–∫–æ –∂–µ –ø–æ–ª—É—á–∞–µ—à—å –≤ –æ—Ç–≤–µ—Ç! –í—Å–µ —á–µ—Å—Ç–Ω–æ!ü§ó\n\n"
            "üéÅ <b>–•–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è?</b>\n–ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ ‚Äî –∏ —Ç–≤–æ—ë –≤–∏–¥–µ–æ —Å—Ä–∞–∑—É –ø–æ–ø–∞–¥—ë—Ç –≤ –æ—á–µ—Ä–µ–¥—å!\n–ö–æ–º–∞–Ω–¥–∞: /invite\n\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ üìä\nüëÆ –ù–µ—á–µ—Å—Ç–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–ª–æ–∫–∏—Ä—É—é—Ç—Å—è\n‚ùì –í–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞–∑–±–∞–Ω ‚Äî @mihei_1985",
            parse_mode="HTML"
        )
        return

    if text == "üîó –î–æ–±–∞–≤–∏—Ç—å –≤–∏–¥–µ–æ":
        update.message.reply_text("üîó –ü—Ä–∏—à–ª–∏ —Å—Å—ã–ª–∫—É –Ω–∞ TikTok-–≤–∏–¥–µ–æ")
        return

    if is_tiktok_link(text):
        is_admin = user_id == ADMIN_ID
        result = add_video(user_id, text, is_admin=is_admin)
        update.message.reply_text(result)
        return

    if text == "üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è":
        tasks, done = get_tasks(user_id)

        if not tasks or done >= len(tasks):
            update.message.reply_text("üì≠ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
            return

        current_link = tasks[done]

        # ‚úÖ –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É —á–µ—Ä–µ–∑ —Ä–µ–¥–∏—Ä–µ–∫—Ç-—Ç—Ä–µ–∫–µ—Ä
        wrapped_link = f"https://cbf57f61-4dc7-450e-9033-9707613b8d28-00-26gc7501m05x3.spock.replit.dev/click?user_id={user_id}&video_link={current_link}"

        # üîß –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–Ω–∏—è
        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()
        cur.execute("UPDATE tasks SET task_time=? WHERE user_id=?", (time.time(), user_id))
        conn.commit()
        conn.close()

        update.message.reply_text(
            f"üëç –ü–æ—Å—Ç–∞–≤—å –ª–∞–π–∫ —ç—Ç–æ–º—É –≤–∏–¥–µ–æ:\n\n"
            f"üîó <a href=\"{wrapped_link}\">–ù–∞–∂–º–∏ –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ</a>\n\n"
            f"üì± –ï—Å–ª–∏ –æ—Ç–∫—Ä—ã–ª–æ—Å—å –≤ –±—Ä–∞—É–∑–µ—Ä–µ ‚Äî –Ω–∞–∂–º–∏ ‚ãÆ –∏ –≤—ã–±–µ—Ä–∏ <b>‚Äú–û—Ç–∫—Ä—ã—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ TikTok‚Äù</b>\n\n"
            f"‚è≥ –ñ–¥–∏ –º–∏–Ω–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ <b>‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏</b>\n"
            f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {done + 1} –∏–∑ {len(tasks)}",
        parse_mode="HTML",
        disable_web_page_preview=True
        )
        return

    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ª–∞–π–∫–∏":
        result = confirm_likes(user_id)
        update.message.reply_text(result)
        return

    if text == "üìä –¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤":
        top = get_top(limit=20)
        if not top:
            update.message.reply_text("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        else:
            msg = "üèÜ <b>–¢–æ–ø —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:</b>\n\n"
            for i, (uid, given, received) in enumerate(top, start=1):
                msg += f"{i}. ID {uid} ‚Äî üëçüèª {given} / ‚ù§Ô∏è {received}\n"
            update.message.reply_text(msg, parse_mode="HTML")
        return

    update.message.reply_text("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–∂–º–∏ /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

def unblock_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    if not context.args:
        update.message.reply_text("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–∏–º–µ—Ä:\n/unblock 123456789")
        return

    try:
        unblock_id = int(context.args[0])
    except ValueError:
        update.message.reply_text("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.")
        return

    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()
    cur.execute("UPDATE users SET banned=0, warnings=0 WHERE user_id=?", (unblock_id,))
    conn.commit()
    conn.close()

    update.message.reply_text(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {unblock_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

def banned_command(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    conn = sqlite3.connect("likes_bot.db")
    cur = conn.cursor()
    cur.execute("SELECT user_id, warnings FROM users WHERE banned=1")  # —É–±—Ä–∞–ª is_blocked
    banned = cur.fetchall()
    conn.close()

    if not banned:
        update.message.reply_text("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    else:
        msg = "<b>üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n"
        for uid, w in banned:
            msg += f"üîí ID <code>{uid}</code> ‚Äî {w} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π\n"
        update.message.reply_text(msg, parse_mode="HTML")

def main():
    keep_alive()
    init_db()

    # üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ—É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –≤–∏–¥–µ–æ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
    def run_cleanup():
        while True:
            cleanup_old_videos()
            time.sleep(600)  # 600 —Å–µ–∫—É–Ω–¥ = 10 –º–∏–Ω—É—Ç

    threading.Thread(target=run_cleanup, daemon=True).start()

    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher

    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏—è—Ö
    threading.Thread(target=auto_notify_new_tasks, args=(updater.bot,), daemon=True).start()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("invite", handle_invate))
    dp.add_handler(CommandHandler("video", handle_message))
    dp.add_handler(CommandHandler("admin_stats", handle_message))
    dp.add_handler(CommandHandler("delete", handle_message))
    dp.add_handler(CommandHandler("test_notify", handle_message))
    dp.add_handler(CommandHandler("invites", handle_message))
    dp.add_handler(CommandHandler("unblock", unblock_command))
    dp.add_handler(CommandHandler("banned", banned_command))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    updater.bot.set_my_commands([
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("invite", "üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å üéÅ"),
    ], scope=BotCommandScopeDefault())

    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞
    updater.bot.set_my_commands([
        BotCommand("start", "üöÄ –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É"),
        BotCommand("admin_stats", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"),
        BotCommand("video", "üìº –°–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ"),
        BotCommand("delete", "üóë –£–¥–∞–ª–∏—Ç—å –≤–∏–¥–µ–æ"),
        BotCommand("test_notify", "üîî –¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"),
        BotCommand("invite", "üë• –ü—Ä–∏–≥–ª–∞—Å–∏ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å üéÅ"),
        BotCommand("invites", "üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"),
        BotCommand("unblock", "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"),
        BotCommand("banned", "üö´ –°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö"),
    ], scope=BotCommandScopeChat(chat_id=ADMIN_ID))

    updater.start_polling()
    updater.idle()


def auto_notify_new_tasks(bot):
    import time
    import sqlite3

    notify_interval = 3600  # 1 —á–∞—Å –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

    print("–ê–≤—Ç–æ-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω—ã")
    while True:
        time.sleep(60)  # —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É

        conn = sqlite3.connect("likes_bot.db")
        cur = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cur.execute("SELECT user_id FROM users")
        users = [row[0] for row in cur.fetchall()]
        print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {len(users)}")

        now = time.time()

        for user_id in users:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            cur.execute("SELECT links FROM tasks WHERE user_id=?", (user_id,))
            row = cur.fetchone()
            if row:
                print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            cur.execute("SELECT last_notify FROM notify_log WHERE user_id=?", (user_id,))
            last_notify_row = cur.fetchone()
            if last_notify_row:
                last_notify = last_notify_row[0]
                if now - last_notify < notify_interval:
                    print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ–¥–∞–≤–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                    continue

            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            cur.execute("SELECT link FROM videos WHERE user_id != ?", (user_id,))
            all_links = set(row[0] for row in cur.fetchall())

            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ª–∞–π–∫–∞–ª
            cur.execute("SELECT video_link FROM likes_log WHERE user_id=?", (user_id,))
            liked_links = set(row[0] for row in cur.fetchall())

            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
            available_links = all_links - liked_links

            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –¥–æ—Å—Ç—É–ø–Ω–æ –≤–∏–¥–µ–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏–π - {len(available_links)}")

            if len(available_links) >= 3:
                try:
                    bot.send_message(chat_id=user_id, text="üì¢ –î–æ—Å—Ç—É–ø–Ω–æ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ! –ù–∞–∂–º–∏ üìã –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è")
                    print(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    cur.execute("""
                        INSERT INTO notify_log (user_id, last_notify)
                        VALUES (?, ?)
                        ON CONFLICT(user_id) DO UPDATE SET last_notify=excluded.last_notify
                    """, (user_id, now))
                    conn.commit()
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {user_id}: {e}")

        conn.close()
        
if __name__ == '__main__':
    main()

